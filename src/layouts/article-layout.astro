---
import type { MarkdownHeading } from 'astro';

import { ArrowLeft } from 'lucide-react';

import BoxContent from '@/components/box/content.astro';
import BoxHeader from '@/components/box/header.astro';
import Box from '@/components/box/index.astro';
import BoxTitle from '@/components/box/title.astro';
import Footer from '@/components/footer.astro';
import Navbar from '@/components/navbar/index.astro';
import Toc from '@/components/toc.astro';
import LinkBtn from '@/components/ui/link-btn.astro';
import Pattern from '@/components/ui/pattern.astro';
import { capitalizeFirstLetter } from '@/lib/utils';

import Layout from './layout.astro';

type Props = {
  title: string;
  readTime: string;
  date: Date;
  headings: MarkdownHeading[];
  image?: string;
  description: string;
};

const { title, readTime, description, date, headings, image } = Astro.props;

const formattedDate = new Intl.DateTimeFormat('en-GB', {
  day: '2-digit',
  month: '2-digit',
  year: 'numeric',
})
  .format(date)
  .replace(/\//g, '.');
---

<Layout title={`${title}`} ogImage={image} description={description}>
  <Navbar className="top-1" />

  <main aria-label="Main content" class="min-h-screen">
    <div class="mx-auto max-w-4xl">
      <Pattern className="h-14">
        <LinkBtn ariaLabel="Back link" className="absolute bottom-0 left-2 z-1" href="/articles">
          <ArrowLeft />
        </LinkBtn>
      </Pattern>

      <Box>
        <BoxHeader class="text-sm !font-medium text-muted-foreground">
          {formattedDate} â€¢ {readTime}
        </BoxHeader>

        <Pattern className="screen-line-after" />

        <BoxHeader>
          <BoxTitle className="text-2xl !font-black md:text-3xl"
            >{capitalizeFirstLetter(title)}</BoxTitle
          >
        </BoxHeader>

        <Pattern />
      </Box>
    </div>

    <div class="relative mx-auto flex max-w-4xl">
      <Box className="min-w-full">
        <BoxContent className="pt-8">
          <article class="prose min-w-full">
            <slot />
          </article>
        </BoxContent>
      </Box>

      <Toc headings={headings} />
    </div>
  </main>

  <Footer />
</Layout>

<script>
  document.addEventListener('astro:page-load', () => {
    /**
     * Add copy button to code snippets in markdown
     */
    const copyButtonLabel = 'Copy';
    const codeBlocks = Array.from(document.querySelectorAll('pre'));

    if (!codeBlocks || codeBlocks.length === 0) return;

    for (const codeBlock of codeBlocks) {
      const wrapper = document.createElement('div');
      wrapper.style.position = 'relative';

      const copyButton = document.createElement('button');
      copyButton.className = 'copy-code';
      copyButton.innerHTML = copyButtonLabel;

      codeBlock.appendChild(copyButton);
      // wrap codebock with relative parent element
      codeBlock.parentNode?.insertBefore(wrapper, codeBlock);
      wrapper.appendChild(codeBlock);

      copyButton.addEventListener('click', async () => {
        await copyCode(codeBlock, copyButton);
      });
    }

    async function copyCode(block: HTMLPreElement, button: HTMLButtonElement) {
      const code = block.querySelector('code');
      const text = code?.textContent;

      await navigator.clipboard.writeText(text || '');

      button.textContent = 'Copied!';

      setTimeout(() => {
        button.textContent = copyButtonLabel;
      }, 1000);
    }
  });
</script>
